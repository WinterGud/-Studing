#include <SDL.h>
#include <SDL_image.h>
#include <stdio.h>
#include <string>
#include <cmath>
#include <iostream>
#include <map>

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 800;
bool stan = true;

std::map<char, int> positionOfPlayer_X
{
	{'1', SCREEN_WIDTH / 6},
	{'2', SCREEN_WIDTH / 2},
	{'3', SCREEN_WIDTH / 6 * 5},
	{'4', SCREEN_WIDTH / 6},
	{'5', SCREEN_WIDTH / 2},
	{'6', SCREEN_WIDTH / 6 * 5},
	{'7', SCREEN_WIDTH / 6},
	{'8', SCREEN_WIDTH / 2},
	{'9', SCREEN_WIDTH / 6 * 5}
};
std::map<char, int> positionOfPlayer_Y
{
	{'1', SCREEN_HEIGHT / 6},
	{'2', SCREEN_HEIGHT / 6},
	{'3', SCREEN_HEIGHT / 6},
	{'4', SCREEN_HEIGHT / 2},
	{'5', SCREEN_HEIGHT / 2},
	{'6', SCREEN_HEIGHT / 2},
	{'7', SCREEN_HEIGHT / 6 * 5},
	{'8', SCREEN_HEIGHT / 6 * 5},
	{'9', SCREEN_HEIGHT / 6 * 5},
};

bool init();
bool loadMedia();
void close();

SDL_Texture* loadTexture(std::string path);
SDL_Window* gWindow = NULL;
SDL_Renderer* gRenderer = NULL;

bool gameLogic() {


	return true;
}

void drawNolik(int32_t x, int32_t y);
void DrawCircle(SDL_Renderer* renderer, int32_t centreX, int32_t centreY, int32_t radius);

bool game() {

	char ch; std::cin >> ch;

	switch (ch)
	{
	case '1':
		drawNolik(positionOfPlayer_X.at(ch), positionOfPlayer_Y.at(ch));
		stan = false;
		break;
	case '2':
		drawNolik(positionOfPlayer_X.at(ch), positionOfPlayer_Y.at(ch));
		stan = false;
		break;
	case '3':
		drawNolik(positionOfPlayer_X.at(ch), positionOfPlayer_Y.at(ch));
		stan = false;
		break;
	case '4':
		drawNolik(positionOfPlayer_X.at(ch), positionOfPlayer_Y.at(ch));
		stan = false;
		break;
	case '5':
		drawNolik(positionOfPlayer_X.at(ch), positionOfPlayer_Y.at(ch));
		stan = false;
		break;
	case '6':
		drawNolik(positionOfPlayer_X.at(ch), positionOfPlayer_Y.at(ch));
		stan = false;
		break;
	case '7':
		drawNolik(positionOfPlayer_X.at(ch), positionOfPlayer_Y.at(ch));
		stan = false;
		break;
	case '8':
		drawNolik(positionOfPlayer_X.at(ch), positionOfPlayer_Y.at(ch));
		stan = false;
		break;
	case '9':
		drawNolik(positionOfPlayer_X.at(ch), positionOfPlayer_Y.at(ch));
		stan = false;
		break;
	default:
		SDL_RenderPresent(gRenderer);
		break;
	}

	drawNolik(positionOfPlayer_X.at(ch), positionOfPlayer_Y.at(ch));
	return stan;
}

int main(int argc, char* args[])
{
	//Start up SDL and create window
	if (!init())
	{
		printf("Failed to initialize!\n");
	}
	else
	{
		//Load media
		if (!loadMedia())
		{
			printf("Failed to load media!\n");
		}
		else
		{
			//Main loop flag
			bool quit = false;

			//Event handler
			SDL_Event e;

			//While application is running
			while (!quit)
			{
				//Handle events on queue
				while (SDL_PollEvent(&e) != 0)
				{
					//User requests quit
					if (e.type == SDL_QUIT)
					{
						quit = true;
					}
					else if (e.type == SDL_KEYDOWN)
					{
						//Select surfaces based on key press
						switch (e.key.keysym.sym)
						{
						case SDLK_SPACE:
							close();
							return 0;
						}
					}
					else
					{
						//Clear screen
						SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
						SDL_RenderClear(gRenderer);

						//Render 2 vertical and 2 horizontal lines
						SDL_SetRenderDrawColor(gRenderer, 0, 0, 0, 0);
						SDL_RenderDrawLine(gRenderer, SCREEN_WIDTH / 3, 0, SCREEN_WIDTH / 3, SCREEN_HEIGHT);
						SDL_RenderDrawLine(gRenderer, SCREEN_WIDTH / 3 * 2, 0, SCREEN_WIDTH / 3 * 2, SCREEN_HEIGHT);
						SDL_RenderDrawLine(gRenderer, 0, SCREEN_HEIGHT / 3, SCREEN_WIDTH, SCREEN_HEIGHT / 3);
						SDL_RenderDrawLine(gRenderer, 0, SCREEN_HEIGHT / 3 * 2, SCREEN_WIDTH, SCREEN_HEIGHT / 3 * 2);
						while (stan) game();


						SDL_RenderPresent(gRenderer);
					}
				}
			}
		}
	}

	//Free resources and close SDL
	close();

	return 0;
}

void drawNolik(int32_t x, int32_t y) {

	DrawCircle(gRenderer, x, y, SCREEN_HEIGHT / 3 / 2 + 1);
	for (int32_t i = 0; i < 100; i++)
	{
		DrawCircle(gRenderer, x, y, (SCREEN_HEIGHT / 3 - i) / 2);
	}
}

SDL_Texture* loadTexture(std::string path)
{
	//The final texture
	SDL_Texture* newTexture = NULL;

	//Load image at specified path
	SDL_Surface* loadedSurface = IMG_Load(path.c_str());
	if (loadedSurface == NULL)
	{
		printf("Unable to load image %s! SDL_image Error: %s\n", path.c_str(), IMG_GetError());
	}
	else
	{
		//Create texture from surface pixels
		newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
		if (newTexture == NULL)
		{
			printf("Unable to create texture from %s! SDL Error: %s\n", path.c_str(), SDL_GetError());
		}

		//Get rid of old loaded surface
		SDL_FreeSurface(loadedSurface);
	}

	return newTexture;
}

void close()
{
	//Destroy window	
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow = NULL;
	gRenderer = NULL;

	//Quit SDL subsystems
	IMG_Quit();
	SDL_Quit();
}

bool loadMedia()
{
	//Loading success flag
	bool success = true;

	//Nothing to load
	return success;
}

bool init()
{
	//Initialization flag
	bool success = true;

	//Initialize SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0)
	{
		printf("SDL could not initialize! SDL Error: %s\n", SDL_GetError());
		success = false;
	}
	else
	{
		//Set texture filtering to linear
		if (!SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1"))
		{
			printf("Warning: Linear texture filtering not enabled!");
		}

		//Create window
		gWindow = SDL_CreateWindow("X_vs_0", 0, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
		if (gWindow == NULL)
		{
			printf("Window could not be created! SDL Error: %s\n", SDL_GetError());
			success = false;
		}
		else
		{
			//Create renderer for window
			gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
			if (gRenderer == NULL)
			{
				printf("Renderer could not be created! SDL Error: %s\n", SDL_GetError());
				success = false;
			}
			else
			{
				//Initialize renderer color
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);

				//Initialize PNG loading
				int imgFlags = IMG_INIT_PNG;
				if (!(IMG_Init(imgFlags) & imgFlags))
				{
					printf("SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError());
					success = false;
				}
			}
		}
	}

	return success;
}

void DrawCircle(SDL_Renderer* renderer, int32_t centreX, int32_t centreY, int32_t radius)
{
	const int32_t diameter = (radius * 2);

	int32_t x = (radius - 1);
	int32_t y = 0;
	int32_t tx = 1;
	int32_t ty = 1;
	int32_t error = (tx - diameter);

	while (x >= y)
	{
		//  Each of the following renders an octant of the circle
		SDL_RenderDrawPoint(renderer, centreX + x, centreY - y);
		SDL_RenderDrawPoint(renderer, centreX + x, centreY + y);
		SDL_RenderDrawPoint(renderer, centreX - x, centreY - y);
		SDL_RenderDrawPoint(renderer, centreX - x, centreY + y);
		SDL_RenderDrawPoint(renderer, centreX + y, centreY - x);
		SDL_RenderDrawPoint(renderer, centreX + y, centreY + x);
		SDL_RenderDrawPoint(renderer, centreX - y, centreY - x);
		SDL_RenderDrawPoint(renderer, centreX - y, centreY + x);

		if (error <= 0)
		{
			++y;
			error += ty;
			ty += 2;
		}

		if (error > 0)
		{
			--x;
			tx += 2;
			error += (tx - diameter);
		}
	}
}
